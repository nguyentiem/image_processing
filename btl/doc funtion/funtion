draw his :
'''
print(img.shape)
color = ('b','g','r')
for channel,col in enumerate(color):
    histr = cv2.calcHist([img],[channel],None,[256],[0,256]) # chanel 0 - 1 -2 cac kenh cua anh
    #print(sum(histr))
    plt.plot(histr,color = col)
    plt.xlim([0,256])
'''
test histogram color

#img = cv2.imread("images/00000.png", 1);
# img = np.zeros((128,128,3))
# img[1:32,1:32,1] =255
# img1 = np.zeros((128,128,3))
# img1[33:64,33:64,1] =255
# img = np.uint8(img)
# img1 = np.uint8(img1)

hist1 = getHis(img)
hist2 = getHis(img1)
print(hist1.shape)
print(hist2.shape)
dis = distance(hist1,hist2)
print(dis)
cv2.imshow('image',img);
cv2.imshow('image1',img1);
plt.show()
////////////////
  tinh mean
a = np.zeros(256);
for i  in range(test.shape[0]):
    for j in range(test.shape[1]):
        a[test[i][j][2]] +=1

a/=test.shape[0]
a/=test.shape[1]
s =0
for i in range(256):
    a[i]*=i;
    s+=a[i]
print(s)
####################################################3
#đạo hàm cấp 2
#laplacian = cv2.Laplacian(img, cv2.CV_64F) # ảnh sau khi đạo hàm cấp 2
#####################################################3
#cv2.imwrite("test1.jpg", imgn)
# c = 1000
# r =1000;
# # chuan hoa , chinh sua
# index =0
# for i in range(len(X)):
#     img = cv2.imread(X[i], 1)
#
#     a,b,d = img.shape
#
#     if a<r:
#         index =i
#         r=a
#     if b<c:
#         c=b
# print(r)
# print(c)
# cat anh :
# arr_img = []
# for i in range(len(X)):
#     img = cv2.imread(X[i], 1)
#     r,c,d = img.shape
#     cr = 78
#     cc = int(c/2)
#
#     imgn = img[cr-78:cr+78,cc-90:cc+90]
#     cv2.imwrite(str(i+1)+".jpg", imgn)

//////////// hog
# w = img.shape[0]
# h = img.shape[1]
# d = img.shape[2]
# #matrix constrain cell (8x8)
#
#
# # chuan hoa dau vao
#
#
#
# dx = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=3) # ảnh sau đạo hàm theo trục x
# dy = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=3) # ảnh sau đạo hàm theo trục y
#
# mag_3 = np.sqrt(np.square(dx) + np.square(dy))
# angel_3 = np.arctan(np.divide(dy, dx+0.00001)) # radian
# angel_3 = np.degrees(angel_3) # -90 -> 90
# angel_3 += 90 # 0 -> 180
# # matrix w x h x 3
# #chuan hoa dau ra đưa về ma trận một 2 chiều
# #mag = max(mag_r,mag_g,mag_b)
# #angel = angel[index(max(mag_r,mag_g,mag_b))]
# index = np.where(mag_3[:,:,0] >= mag_3[:,:,1], 0, 1)
# angel = np.where(mag_3[:,:,0] >= mag_3[:,:,1], angel_3[:,:,0], angel_3[:,:,1])
# mag = maximum(mag_3[:,:,0],mag_3[:,:,1]);
#
# index = np.where(mag >= mag_3[:,:,2],index, 2)
# angel = np.where(mag >= mag_3[:,:,2],angel, angel_3[:,:,2])
# mag =maximum(mag,mag_3[:,:,2])
#
# # tính histogram theo mag của từng cell
# # chia cell ra để láy thuộc tính cục bộ
# #
# n_cellx = int(w/w_cell)
# n_celly = int(h/w_cell)
# hist_tensor = np.zeros([n_cellx, n_celly, n_bin]) # 16 x 8 x 9
# for cx in range(n_cellx):
#     for cy in range(n_celly):
#         ori_t = angel[cy*w_cell:cy*w_cell+w_cell, cx*w_cell:cx*w_cell+w_cell] # lấy ma trận 8x8 trong góc
#         mag_t = mag[cy*w_cell:cy*w_cell+w_cell, cx*w_cell:cx*w_cell+w_cell]   # lấy ma trận 8x8 trong độ lớn
#
#         hist, _ = np.histogram(ori_t, bins=n_bin, range=(0, 180), weights=mag_t) # 1-D vector, 9 elements
#         #
#         hist_tensor[cy, cx, :] = hist
# print(hist_tensor.shape)
# # chuẩn hóa đầu ra
# # phép đạo hàm rất nhạy với sự thay đổi ánh sáng nên cần chuẩn hóa
# n_blockx = n_cellx-w_block+1
# n_blocky = n_celly-w_block+1
# deep = (w_block*w_block*n_bin)
# vector = np.zeros([n_blockx,n_blocky,deep]) # moi cell co n_bin , moi block co w_block *w_block cell
#
# for row in range(n_blockx):
#     for col in range(n_blocky):
#         arr = hist_tensor[row:row+w_block,col:col+w_block,:]
#         arr= arr.reshape(deep)
#
#         norm = ((sum(arr*arr))**(1/2))
#         arr =arr/norm
#         vector[row, col, :] = arr
#


# print(vector)
# print(vector.shape[0]*vector.shape[1]*vector.shape[2])
# # cv2.imshow('anh goc',img)
# # cv2.imshow('lap',laplacian)
# # cv2.imshow('x',dx)
# # cv2.imshow('y',dy)
# # cv2.imshow('x y',mag_3)
# # cv2.imshow('x y',mag)

////////////////////
# matrix constrain cell (8x8)
# chuan hoa dau vao
# dx = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=3)  # ảnh sau đạo hàm theo trục x
# print(dx.shape)
# dy = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=3)  # ảnh sau đạo hàm theo trục y
# dxy =  np.sqrt(np.square(dx) + np.square(dy))
# dxy = np.uint8(dxy)
# cv2.imshow('anh goc',img)
# cv2.imshow('dx',dx)
# cv2.imshow('dy',dy)
# cv2.imshow('dxy',dxy)